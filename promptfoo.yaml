configVersion: 1

# Use OpenAI/compatible API; inject key via OPENAI_API_KEY in CI
providers:
  - id: openai:gpt-4o-mini
    config:
      apiKey: ${OPENAI_API_KEY}
      temperature: 0.2
      maxOutputTokens: 256

# Inline mustache prompt template (do not modify project prompt files)
prompts:
  - text: |
      Below is a brief description of {{agent}}:
      {{base_desc}}

      Below are {{agent}}'s memories:
      {{memory}}

      Current address: {{address}}
      Current time: {{current_time}}

      {{previous_context}}{{current_context}}
      {{agent}} starts a conversation with {{another}}. The following is their conversation log:
      <conversation_log>
      {{conversation}}
      </conversation_log>

      <conversation_rules>
      {{agent}} should not repeat content already present in <conversation_log>.
      </conversation_rules>

      Based on the above <conversation_log> and <conversation_rules>, what will {{agent}} say to {{another}} now?
      Output strictly the following JSON format, and do not include any extra information:
      {
          "{{agent}}": <what {{agent}} says>
      }

# Default variables (can be overridden by scenarios)
vars:
  agent: Test Agent
  another: Another Person
  base_desc: An intelligent assistant who communicates clearly and avoids repetition.
  memory: ""
  address: 1 Test Street
  current_time: 2025-10-18 17:00
  previous_context: ""
  current_context: ""
  conversation: ""

# Three basic scenarios
scenarios:
  - name: Basic dialog
    vars:
      agent: Lei Li
      another: Meimei Han
      base_desc: A friendly and rational assistant
      memory: Preparing a project briefing recently
      address: Pudong New Area, Shanghai
      current_time: 2025/10/18 17:00
      previous_context: ""
      current_context: ""
      conversation: "Lei Li: We need to prepare for tomorrow's briefing.\nMeimei Han: Okay, I'll organize the materials tonight."

  - name: Long dialog - avoid repetition
    vars:
      agent: Jack
      another: Lee
      base_desc: An assistant skilled at concise responses
      memory: Yesterday they discussed the meeting agenda
      address: Zhongguancun, Beijing
      current_time: 2025/10/18 17:05
      previous_context: "They just confirmed the meeting location."
      current_context: ""
      conversation: "Jack: The meeting is on 3F of Building A.\nLee: Got it, I'll arrive early.\nJack: Don't forget the projector cable."

  - name: Includes context
    vars:
      agent: Alice
      another: Bob
      base_desc: Values politeness and efficiency
      memory: "Task list completed: wrote the report, sent emails"
      address: Nanshan District, Shenzhen
      current_time: 2025/10/18 17:10
      previous_context: "Currently in the office, network is stable."
      current_context: "The manager just reminded submitting on time."
      conversation: "Alice: The report is almost done.\nBob: Then please send it to me ASAP."

# Assertions: structure, content, tone
assertions:
  # Must be JSON
  - type: contains-json
  # Must include key with agent name
  - type: contains
    value: "\"{{agent}}\":"
  # Weak regex validation for key-value string JSON
  - type: regex
    pattern: "\\{\\s*\"{{agent}}\"\\s*:\\s*\".+\"\\s*\\}"
  # Must not fully repeat the conversation log
  - type: not-contains
    value: "{{conversation}}"
  # Length range and type checking (JS assertion)
  - type: javascript
    code: |
      let obj;
      try { obj = JSON.parse(output); } catch (e) { return { pass: false, reason: 'not JSON' }; }
      const reply = obj[vars.agent];
      if (typeof reply !== 'string') return { pass: false, reason: 'value is not a string' };
      const len = reply.length;
      if (len < 5) return { pass: false, reason: 'too short' };
      if (len > 160) return { pass: false, reason: 'too long' };
      return true;
  # Tone check (dialog politeness words)
  - type: javascript
    code: |
      const obj = JSON.parse(output);
      const reply = obj[vars.agent] || '';
      const ok = /you|please|thanks|thank you/.test(reply.toLowerCase());
      return ok ? true : { pass: false, reason: 'missing polite dialog tone words' };

# Output will be saved to results/promptfoo/latest.json (configured by CI command)